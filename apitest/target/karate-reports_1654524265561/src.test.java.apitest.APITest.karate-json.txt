{"failedCount":0,"prefixedPath":"src\/test\/java\/apitest\/APITest.feature","packageQualifiedName":"src.test.java.apitest.APITest","loopIndex":-1,"relativePath":"src\/test\/java\/apitest\/APITest.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":87926100,"millis":87.9261,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"header Authorization = 'Bearer ' + 'ce5ec6bca9454e3d03f36910cb6f4a5f90b418e3740db722378c6c065328b840'"}},{"result":{"nanos":687800,"millis":0.6878,"status":"passed"},"step":{"background":true,"line":5,"prefix":"Given","index":1,"text":"url 'https:\/\/gorest.co.in'"}},{"result":{"nanos":15458800,"millis":15.4588,"status":"passed"},"step":{"line":8,"prefix":"Given","index":0,"text":"path  '\/public\/v2\/users'"}},{"result":{"nanos":55823500,"millis":55.8235,"status":"passed"},"step":{"line":9,"prefix":"When","index":1,"text":"request { \"name\": \"Ranjith2\", \"email\": \"rkumar0407@gmail.com\", \"gender\": \"male\" , \"status\": \"active\" }"}},{"result":{"nanos":1010945700,"millis":1010.9457,"status":"passed"},"step":{"line":10,"prefix":"When","index":2,"text":"method POST"},"stepLog":"19:27:58.729 request:\n1 > POST https:\/\/gorest.co.in\/public\/v2\/users\n1 > Authorization: Bearer ce5ec6bca9454e3d03f36910cb6f4a5f90b418e3740db722378c6c065328b840\n1 > Content-Type: application\/json; charset=UTF-8\n1 > Content-Length: 84\n1 > Host: gorest.co.in\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/17.0.2)\n1 > Accept-Encoding: gzip,deflate\n{\"gender\":\"male\",\"name\":\"Ranjith2\",\"email\":\"rkumar0407@gmail.com\",\"status\":\"active\"}\n\n19:27:59.234 response time in milliseconds: 502\n1 < 201\n1 < Server: nginx\n1 < Date: Mon, 06 Jun 2022 13:57:59 GMT\n1 < Content-Type: application\/json; charset=utf-8\n1 < Transfer-Encoding: chunked\n1 < Connection: keep-alive\n1 < X-Frame-Options: SAMEORIGIN\n1 < X-XSS-Protection: 0\n1 < X-Content-Type-Options: nosniff\n1 < X-Download-Options: noopen\n1 < X-Permitted-Cross-Domain-Policies: none\n1 < Referrer-Policy: strict-origin-when-cross-origin\n1 < X-RateLimit-Limit: 90\n1 < X-RateLimit-Remaining: 89\n1 < X-RateLimit-Reset: 1\n1 < Location: https:\/\/gorest.co.in\/public\/v2\/users\/6671\n1 < ETag: W\/\"f4e2b7eca4063f5ad10a2eb4be2de4e3\"\n1 < Cache-Control: max-age=0, private, must-revalidate\n1 < X-Request-Id: b24fb470-a601-48f5-9399-c1e8d8e2bbd9\n1 < X-Runtime: 0.022469\n1 < Strict-Transport-Security: max-age=63072000; includeSubDomains\n1 < Vary: Origin\n{\"gender\":\"male\",\"name\":\"Ranjith2\",\"id\":6671,\"email\":\"rkumar0407@gmail.com\",\"status\":\"active\"}\n"},{"result":{"nanos":29300,"millis":0.0293,"status":"passed"},"step":{"line":11,"prefix":"Then","index":3,"text":"status 201"}},{"result":{"nanos":115008400,"millis":115.0084,"status":"passed"},"step":{"line":12,"prefix":"And","index":4,"text":"print response"},"stepLog":"19:27:59.350 [print] {\n  \"gender\": \"male\",\n  \"name\": \"Ranjith2\",\n  \"id\": 6671,\n  \"email\": \"rkumar0407@gmail.com\",\n  \"status\": \"active\"\n}\n \n"},{"result":{"nanos":186458400,"millis":186.4584,"status":"passed"},"step":{"line":13,"prefix":"When","index":5,"text":"method GET"},"stepLog":"19:27:59.353 request:\n2 > GET https:\/\/gorest.co.in\n2 > Host: gorest.co.in\n2 > Connection: Keep-Alive\n2 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/17.0.2)\n2 > Accept-Encoding: gzip,deflate\n\n\n19:27:59.533 response time in milliseconds: 173\n2 < 200\n2 < Server: nginx\n2 < Date: Mon, 06 Jun 2022 13:57:59 GMT\n2 < Content-Type: text\/html; charset=utf-8\n2 < Transfer-Encoding: chunked\n2 < Connection: keep-alive\n2 < Vary: Accept-Encoding\n2 < X-Frame-Options: SAMEORIGIN\n2 < X-XSS-Protection: 0\n2 < X-Content-Type-Options: nosniff\n2 < X-Download-Options: noopen\n2 < X-Permitted-Cross-Domain-Policies: none\n2 < Referrer-Policy: strict-origin-when-cross-origin\n2 < Link: <\/assets\/application-2715366c2372d5dfabfa9c9d05a0e84b9c0de17fe12c2d96e07d2db0e218fed2.css>; rel=preload; as=style; nopush\n2 < ETag: W\/\"dd37d5e6ee17e75ec3a0affe30a6000e\"\n2 < Cache-Control: max-age=0, private, must-revalidate\n2 < Feature-Policy: camera 'none'; gyroscope 'none'; microphone 'none'; usb 'none'; fullscreen 'self'\n2 < X-Request-Id: 3b944af8-7d39-446e-9a81-9cf4992288b7\n2 < X-Runtime: 0.013535\n2 < Strict-Transport-Security: max-age=63072000; includeSubDomains\n2 < Set-Cookie: _gorest_session=Ooq8VjD2DgtUlKR%2F6l53rfIz8slJcgof2IiUBCx%2B5ODolyLWvS0Wg2tBeF59E6i%2BxG8ofPoTNM3uf7HelJTBzvhDvTnJrbkkg%2BrY9h5EE70Aq1mRLbrk21s8phPZ7ZqjL%2B0aHOaWbxO77CIFB9Fep64y1drbwFHyxxQXHO9%2BPZtBzZT9bbOzAsDeZxEngtpzlVv82a8RC2x1Y%2B4HXtUu4YZlBKIVy51WiEGrNU66GSwIgAJeEAQWsTtyd8kxmbSzUfQ6h50jHHZXpUZPEEi5EAxI3L9ijQU%3D--EKa8m0I73tB5AnGs--u8616bJgMftMxP%2BcVOLCJA%3D%3D; Domain=gorest.co.in; Secure\n<!DOCTYPE html><html><head><meta charset=\"utf-8\" \/><meta content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" name=\"viewport\" \/><link href=\"\/favicon.ico\" rel=\"icon\" type=\"image\/x-icon\" \/><title>GraphQL and REST API for Testing and Prototyping | GO REST<\/title>\n<meta name=\"description\" content=\"24\/7 online fake GraphQL and REST API service for quick testing and prototyping of web and android applications. Supports authentication, custom rate limiting, response format negotiation\">\n<meta name=\"keywords\" content=\"graphql, rest api, fake data, api testing, graphql testing, json response, xml response, oauth, rate limiting\"><meta name=\"csrf-param\" content=\"authenticity_token\" \/>\n<meta name=\"csrf-token\" content=\"t24bxmQWr9R2GKKPexmMBoPNvuW4v1MKF7hl1GKh_Jp5fVECQV2sXNsRtmJAukmj00XzHH2jqlN7Fnu2S1C8LA\" \/><link rel=\"stylesheet\" href=\"\/assets\/application-2715366c2372d5dfabfa9c9d05a0e84b9c0de17fe12c2d96e07d2db0e218fed2.css\" media=\"all\" data-turbolinks-track=\"reload\" \/><script src=\"\/packs\/js\/application-84cecc93f869802defaa.js\" data-turbolinks-track=\"reload\" defer=\"defer\"><\/script><script async=\"true\" crossorigin=\"anonymous\" src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js?client=ca-pub-4930099895671899\"><\/script><script async=\"true\" src=\"https:\/\/www.googletagmanager.com\/gtag\/js?id=G-7KR6VNWHWS\"><\/script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-7KR6VNWHWS');<\/script><\/head><body><nav class=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top\"><div class=\"container\"><a class=\"navbar-brand\" href=\"\/\"><i class=\"fas fa-exchange-alt\"><\/i> Go REST<\/a><button aria-controls=\"AppNavBar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\" data-bs-target=\"#AppNavBar\" data-bs-toggle=\"collapse\" type=\"button\"><span class=\"navbar-toggler-icon\"><\/span><\/button><div class=\"collapse navbar-collapse\" id=\"AppNavBar\"><ul class=\"navbar-nav ms-auto\"><li class=\"nav-item\"><a class=\"nav-link\" href=\"\/chandamama-stories\"><i class=\"fas fa-cloud-moon\"><\/i> Chandamama Stories<\/a><\/li><li class=\"nav-item\"><a class=\"nav-link\" href=\"\/qa\"><i class=\"fas fa-life-ring\"><\/i> Help<\/a><\/li><li class=\"nav-item\"><a class=\"nav-link\" href=\"\/rest-console\"><i class=\"fab fa-linux\"><\/i> Rest Console<\/a><\/li><li class=\"nav-item dropdown\"><a aria-expanded=\"false\" class=\"nav-link dropdown-toggle\" data-bs-toggle=\"dropdown\" href=\"#\" id=\"ToolsDropDown\" role=\"button\"><i class=\"fas fa-tools\"><\/i> Tools<\/a><ul aria-labelledby=\"ToolsDropDown\" class=\"dropdown-menu\"><li class=\"\"><a class=\"dropdown-item\" href=\"\/tools\/base64-encode-decode\">Base64 Encode\/Decode<\/a><\/li><li class=\"\"><a class=\"dropdown-item\" href=\"\/tools\/url-encode-decode\">Url Encode\/Decode<\/a><\/li><li class=\"\"><a class=\"dropdown-item\" href=\"\/tools\/gcode-translator\">G-Code Translator<\/a><\/li><\/ul><\/li><li class=\"nav-item\"><a class=\"nav-link\" href=\"\/consumer\/login\">Login<\/a><\/li><\/ul><\/div><\/div><\/nav><div class=\"container pt-3\"><h1 class=\"text-center\">GraphQL and REST API for Testing and Prototyping<\/h1><h4 class=\"text-center text-muted\">fake data | real responses | 24\/7 online<\/h4><div class=\"row mt-5\"><div class=\"col-md-6\"><h3>Resources<\/h3><table class=\"table table-responsive-sm table-sm\"><tr><td><samp><a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/users\">https:\/\/gorest.co.in\/public\/v2\/users<\/a><\/samp><\/td><td class=\"text-end\">4067<\/td><\/tr><tr><td><samp><a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/posts\">https:\/\/gorest.co.in\/public\/v2\/posts<\/a><\/samp><\/td><td class=\"text-end\">1969<\/td><\/tr><tr><td><samp><a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/comments\">https:\/\/gorest.co.in\/public\/v2\/comments<\/a><\/samp><\/td><td class=\"text-end\">2001<\/td><\/tr><tr><td><samp><a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/todos\">https:\/\/gorest.co.in\/public\/v2\/todos<\/a><\/samp><\/td><td class=\"text-end\">2036<\/td><\/tr><\/table><\/div><div class=\"col-md-6\"><h3>Trying it Out<\/h3><table class=\"table table-responsive-sm table-sm\"><tr><td><samp>POST \/public\/v2\/users<\/samp><\/td><td class=\"text-end\">Create a new user<\/td><\/tr><tr><td><samp>GET \/public\/v2\/users\/8<\/samp><\/td><td class=\"text-end\">Get user details<\/td><\/tr><tr><td><samp>PUT|PATCH \/public\/v2\/users\/8<\/samp><\/td><td class=\"text-end\">Update user details<\/td><\/tr><tr><td><samp>DELETE \/public\/v2\/users\/8<\/samp><\/td><td class=\"text-end\">Delete user<\/td><\/tr><\/table><\/div><\/div><h3 class=\"mt-3\">Nested Resources<\/h3><div class=\"row\"><div class=\"col-md-6\"><table class=\"table table-responsive-sm table-sm\"><tr><td><samp>GET <a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/users\/8\/posts\">\/public\/v2\/users\/8\/posts<\/a><\/samp><\/td><td class=\"text-end\">Retrieves user posts<\/td><\/tr><tr><td><samp>GET <a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/posts\/8\/comments\">\/public\/v2\/posts\/8\/comments<\/a><\/samp><\/td><td class=\"text-end\">Retrieves post comments<\/td><\/tr><tr><td><samp>GET <a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/users\/8\/todos\">\/public\/v2\/users\/8\/todos<\/a><\/samp><\/td><td class=\"text-end\">Retrieves user todos<\/td><\/tr><\/table><\/div><div class=\"col-md-6\"><table class=\"table table-responsive-sm table-sm\"><tr><td><samp>POST \/public\/v2\/users\/8\/posts<\/samp><\/td><td class=\"text-end\">Creates a user post<\/td><\/tr><tr><td><samp>POST \/public\/v2\/posts\/8\/comments<\/samp><\/td><td class=\"text-end\">Creates a post comment<\/td><\/tr><tr><td><samp>POST \/public\/v2\/users\/8\/todos<\/samp><\/td><td class=\"text-end\">Creates a user todo<\/td><\/tr><\/table><\/div><\/div><ul><li class=\"text-warning\">Do not post your personal data like name, email, phone, photo etc...<\/li><li class=\"text-info\">For paged results parameter \"page\" should be passed in url ex: GET <code>\/public\/v2\/users?page=1<\/code><\/li><li class=\"text-info\">Request methods PUT, POST, PATCH, DELETE needs access token, which needs to be passed with &quot;Authorization&quot; header as Bearer token.<\/li><li class=\"text-info\">API Versions <code>\/public-api\/*<\/code>, <code>\/public\/v1\/*<\/code> and <code>\/public\/v2\/*<\/code><\/li><li><a href=\"\/consumer\/login\">Get your access token<\/a><\/li><\/ul><h3 class=\"mt-5\">GraphQL Endpoint<\/h3><ul><li>GraphQL API is available at <code>https:\/\/gorest.co.in\/public\/v2\/graphql<\/code><\/li><li><a target=\"_blank\" href=\"\/graphql\/schema.json\">View GraphQL json schema<\/a><\/li><li><a target=\"_blank\" href=\"graphql\/schema.graphql\">View GrapQL schema<\/a><\/li><\/ul><h3 class=\"mt-5\">Features<\/h3><ul><li>Fully secured quick prototyping.<\/li><li>Response format negotiation. (supporting JSON and XML add &quot;.json&quot; or &quot;.xml&quot; to api end point)<\/li><li>Support for the OPTIONS and HEAD verbs.<\/li><li>Full search support on all fields. Ex: https:\/\/gorest.co.in\/public\/v2\/users?name=kumar<\/li><li>Data created\/modified by a user is only visible to that perticular user, all data will be deleted and recreated on daily basis.<\/li><li><a href=\"\/my-account\/logs\">Request and response logging.<\/a><\/li><\/ul><div class=\"row\"><div class=\"col-md-6\"><h3 class=\"mt-3\">Rate Limiting Headers<\/h3><ul><li><a href=\"\/my-account\/access-tokens\">Customize the rate limit per access token.<\/a><\/li><li><code>X-RateLimit-Limit<\/code> number of allowed requests\/minute.<\/li><li><code>X-RateLimit-Remaining<\/code> remaining requests within the current period.<\/li><li><code>X-RateLimit-Reset<\/code> seconds to wait before having maximum number of allowed requests again.<\/li><\/ul><\/div><div class=\"col-md-6\"><h3 class=\"mt-3\">Pagination Headers<\/h3><ul><li><code>X-Pagination-Total<\/code> total number of results.<\/li><li><code>X-Pagination-Pages<\/code> total number of pages.<\/li><li><code>X-Pagination-Page<\/code> current page number.<\/li><li><code>X-Pagination-Limit<\/code> results per page.<\/li><\/ul><\/div><\/div><h3 class=\"mt-3\">API Version 2<\/h3><ul><li>Path: <code>\/public\/v2\/*<\/code><\/li><li>Response format Object or Array of Objects <code>{}<\/code> or <code>[{}]<\/code><\/li><li>HTTP Status code contains the actual response code, response headers contains the pagination information, response body contains the results.<\/li><\/ul><h3 class=\"mt-3\">API Version 1<\/h3><ul><li>Path: <code>\/public\/v1\/*<\/code><\/li><li>Response format <code>{ meta:, data: }<\/code><\/li><li>HTTP status code contains the actual response code, <code>meta<\/code> contains the pagination information and <code>data<\/code> contains the actual results<\/li><\/ul><h3 class=\"mt-3\">API Version 0<\/h3><ul><li>Path: <code>\/public-api\/*<\/code><\/li><li>Response format <code>{ code :, meta:, data: }<\/code><\/li><li>HTTP status code is always 200, <code>code<\/code> contains the actual response code, <code>meta<\/code> contains the pagination information, <code>data<\/code> contains the actual results<\/li><\/ul><h3 class=\"mt-5\">Authentication<\/h3><p>Unlike Web applications, RESTful APIs are usually stateless, which means sessions or cookies should not be used. Therefore, each request should come with some sort of authentication credentials. A common practice is to send a secret access token with each request to authenticate the user. Since an access token can be used to uniquely identify and authenticate a user, API requests should always be sent via HTTPS to prevent man-in-the-middle (MitM) attacks. <\/p><p>There are different ways to send an access token:<\/p><ul><li><a href=\"http:\/\/en.wikipedia.org\/wiki\/Basic_access_authentication\" rel=\"noreferrer\" target=\"_blank\">HTTP Basic Auth<\/a>: the access token is sent as the username.<\/li><li>Query parameter: the access token is sent as a query parameter in the API URL. <br \/>e.g. <samp>https:\/\/gorest.co.in\/public\/v2\/users?access-token=xxx<\/samp><\/li><li><a href=\"http:\/\/oauth.net\/2\/\" rel=\"noreferrer\" target=\"_blank\">OAuth 2<\/a>: the access token is obtained by the consumer from an authorization server and sent to the API server via <a href=\"http:\/\/tools.ietf.org\/html\/rfc6750\" rel=\"noreferrer\" target=\"_blank\">HTTP Bearer Tokens <\/a>, according to the OAuth2 protocol.<\/li><li class=\"text-info\">This API supports only &quot;HTTP Bearer Tokens&quot; and &quot;Query parameter Auth&quot;<\/li><\/ul><h3 class=\"mt-5 mb-3\">cUrl Examples for REST API<\/h3><div class=\"mb-3\"><h6 class=\"text-info\">List users<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XGET \"https:\/\/gorest.co.in\/public\/v2\/users\"<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Create user<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/users\"  -d '{\"name\":\"Tenali Ramakrishna\", \"gender\":\"male\", \"email\":\"tenali.ramakrishna@15ce.com\", \"status\":\"active\"}' <\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Update user<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\"  -XPATCH \"https:\/\/gorest.co.in\/public\/v2\/users\/8\" -d '{\"name\":\"Allasani Peddana\", \"email\":\"allasani.peddana@15ce.com\", \"status\":\"active\"}' <\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Delete user<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XDELETE \"https:\/\/gorest.co.in\/public\/v2\/users\/8\"<\/samp><\/div><h3 class=\"mt-5 mb-3\">cUrl Examples for GraphQL<\/h3><div class=\"mb-3\"><h6 class=\"text-info\">List users<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"query{users {pageInfo {endCursor startCursor hasNextPage hasPreviousPage} totalCount nodes {id name email gender status}}}\"}'<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Get User<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"query{user(id: 8) { id name email gender status }}\"}'<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Create User<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"mutation{createUser(input: {name: \\\"Tenali Ramakrishna\\\" gender: \\\"male\\\" email: \\\"tenali.ramakrishna@15ce.com\\\" status: \\\"active\\\"}) {user{id name gender email status}}}\"}'<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Update User<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"mutation{updateUser(input: {id: 8 name: \\\"Allasani Peddana\\\" email: \\\"allasani.peddana@15ce.com\\\" status: \\\"active\\\"}) {user{id name gender email status}}}\"}'<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Delete User<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"mutation{deleteUser(input: {id: 8}){user {id name email gender status}}}\"}'<\/samp><\/div><h3 class=\"mt-5\">REST API Http Response Codes<\/h3><ul><li>200: OK. Everything worked as expected.<\/li><li>201: A resource was successfully created in response to a POST request. The Location header contains the URL pointing to the newly created resource.<\/li><li>204: The request was handled successfully and the response contains no body content (like a DELETE request).<\/li><li>304: The resource was not modified. You can use the cached version.<\/li><li>400: Bad request. This could be caused by various actions by the user, such as providing invalid JSON data in the request body etc.<\/li><li>401: Authentication failed.<\/li><li>403: The authenticated user is not allowed to access the specified API endpoint.<\/li><li>404: The requested resource does not exist.<\/li><li>405: Method not allowed. Please check the Allow header for the allowed HTTP methods.<\/li><li>415: Unsupported media type. The requested content type or version number is invalid.<\/li><li>422: Data validation failed (in response to a POST request, for example). Please check the response body for detailed error messages.<\/li><li>429: Too many requests. The request was rejected due to rate limiting.<\/li><li>500: Internal server error. This could be caused by internal program errors.<\/li><\/ul><\/div><hr class=\"mt-5\" \/><div class=\"container\"><div class=\"footer\"><ul class=\"list-inline\"><li class=\"list-inline-item\">&copy; Go Rest 2022<\/li><li class=\"list-inline-item float-lg-end\"><a href=\"\/privacy-policy\">Privacy Policy<\/a><\/li><li class=\"list-inline-item float-lg-end me-3\"><a href=\"\/contact-us\">Contact Us<\/a><\/li><\/ul><\/div><\/div><\/body><\/html>\n"},{"result":{"nanos":9100,"millis":0.0091,"status":"passed"},"step":{"line":14,"prefix":"Then","index":6,"text":"status 200"}},{"result":{"nanos":769200,"millis":0.7692,"status":"passed"},"step":{"line":15,"prefix":"And","index":7,"text":"print response"},"stepLog":"19:27:59.538 [print] <!DOCTYPE html><html><head><meta charset=\"utf-8\" \/><meta content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" name=\"viewport\" \/><link href=\"\/favicon.ico\" rel=\"icon\" type=\"image\/x-icon\" \/><title>GraphQL and REST API for Testing and Prototyping | GO REST<\/title>\n<meta name=\"description\" content=\"24\/7 online fake GraphQL and REST API service for quick testing and prototyping of web and android applications. Supports authentication, custom rate limiting, response format negotiation\">\n<meta name=\"keywords\" content=\"graphql, rest api, fake data, api testing, graphql testing, json response, xml response, oauth, rate limiting\"><meta name=\"csrf-param\" content=\"authenticity_token\" \/>\n<meta name=\"csrf-token\" content=\"t24bxmQWr9R2GKKPexmMBoPNvuW4v1MKF7hl1GKh_Jp5fVECQV2sXNsRtmJAukmj00XzHH2jqlN7Fnu2S1C8LA\" \/><link rel=\"stylesheet\" href=\"\/assets\/application-2715366c2372d5dfabfa9c9d05a0e84b9c0de17fe12c2d96e07d2db0e218fed2.css\" media=\"all\" data-turbolinks-track=\"reload\" \/><script src=\"\/packs\/js\/application-84cecc93f869802defaa.js\" data-turbolinks-track=\"reload\" defer=\"defer\"><\/script><script async=\"true\" crossorigin=\"anonymous\" src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js?client=ca-pub-4930099895671899\"><\/script><script async=\"true\" src=\"https:\/\/www.googletagmanager.com\/gtag\/js?id=G-7KR6VNWHWS\"><\/script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-7KR6VNWHWS');<\/script><\/head><body><nav class=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top\"><div class=\"container\"><a class=\"navbar-brand\" href=\"\/\"><i class=\"fas fa-exchange-alt\"><\/i> Go REST<\/a><button aria-controls=\"AppNavBar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\" data-bs-target=\"#AppNavBar\" data-bs-toggle=\"collapse\" type=\"button\"><span class=\"navbar-toggler-icon\"><\/span><\/button><div class=\"collapse navbar-collapse\" id=\"AppNavBar\"><ul class=\"navbar-nav ms-auto\"><li class=\"nav-item\"><a class=\"nav-link\" href=\"\/chandamama-stories\"><i class=\"fas fa-cloud-moon\"><\/i> Chandamama Stories<\/a><\/li><li class=\"nav-item\"><a class=\"nav-link\" href=\"\/qa\"><i class=\"fas fa-life-ring\"><\/i> Help<\/a><\/li><li class=\"nav-item\"><a class=\"nav-link\" href=\"\/rest-console\"><i class=\"fab fa-linux\"><\/i> Rest Console<\/a><\/li><li class=\"nav-item dropdown\"><a aria-expanded=\"false\" class=\"nav-link dropdown-toggle\" data-bs-toggle=\"dropdown\" href=\"#\" id=\"ToolsDropDown\" role=\"button\"><i class=\"fas fa-tools\"><\/i> Tools<\/a><ul aria-labelledby=\"ToolsDropDown\" class=\"dropdown-menu\"><li class=\"\"><a class=\"dropdown-item\" href=\"\/tools\/base64-encode-decode\">Base64 Encode\/Decode<\/a><\/li><li class=\"\"><a class=\"dropdown-item\" href=\"\/tools\/url-encode-decode\">Url Encode\/Decode<\/a><\/li><li class=\"\"><a class=\"dropdown-item\" href=\"\/tools\/gcode-translator\">G-Code Translator<\/a><\/li><\/ul><\/li><li class=\"nav-item\"><a class=\"nav-link\" href=\"\/consumer\/login\">Login<\/a><\/li><\/ul><\/div><\/div><\/nav><div class=\"container pt-3\"><h1 class=\"text-center\">GraphQL and REST API for Testing and Prototyping<\/h1><h4 class=\"text-center text-muted\">fake data | real responses | 24\/7 online<\/h4><div class=\"row mt-5\"><div class=\"col-md-6\"><h3>Resources<\/h3><table class=\"table table-responsive-sm table-sm\"><tr><td><samp><a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/users\">https:\/\/gorest.co.in\/public\/v2\/users<\/a><\/samp><\/td><td class=\"text-end\">4067<\/td><\/tr><tr><td><samp><a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/posts\">https:\/\/gorest.co.in\/public\/v2\/posts<\/a><\/samp><\/td><td class=\"text-end\">1969<\/td><\/tr><tr><td><samp><a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/comments\">https:\/\/gorest.co.in\/public\/v2\/comments<\/a><\/samp><\/td><td class=\"text-end\">2001<\/td><\/tr><tr><td><samp><a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/todos\">https:\/\/gorest.co.in\/public\/v2\/todos<\/a><\/samp><\/td><td class=\"text-end\">2036<\/td><\/tr><\/table><\/div><div class=\"col-md-6\"><h3>Trying it Out<\/h3><table class=\"table table-responsive-sm table-sm\"><tr><td><samp>POST \/public\/v2\/users<\/samp><\/td><td class=\"text-end\">Create a new user<\/td><\/tr><tr><td><samp>GET \/public\/v2\/users\/8<\/samp><\/td><td class=\"text-end\">Get user details<\/td><\/tr><tr><td><samp>PUT|PATCH \/public\/v2\/users\/8<\/samp><\/td><td class=\"text-end\">Update user details<\/td><\/tr><tr><td><samp>DELETE \/public\/v2\/users\/8<\/samp><\/td><td class=\"text-end\">Delete user<\/td><\/tr><\/table><\/div><\/div><h3 class=\"mt-3\">Nested Resources<\/h3><div class=\"row\"><div class=\"col-md-6\"><table class=\"table table-responsive-sm table-sm\"><tr><td><samp>GET <a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/users\/8\/posts\">\/public\/v2\/users\/8\/posts<\/a><\/samp><\/td><td class=\"text-end\">Retrieves user posts<\/td><\/tr><tr><td><samp>GET <a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/posts\/8\/comments\">\/public\/v2\/posts\/8\/comments<\/a><\/samp><\/td><td class=\"text-end\">Retrieves post comments<\/td><\/tr><tr><td><samp>GET <a target=\"_blank\" class=\"text-white\" href=\"https:\/\/gorest.co.in\/public\/v2\/users\/8\/todos\">\/public\/v2\/users\/8\/todos<\/a><\/samp><\/td><td class=\"text-end\">Retrieves user todos<\/td><\/tr><\/table><\/div><div class=\"col-md-6\"><table class=\"table table-responsive-sm table-sm\"><tr><td><samp>POST \/public\/v2\/users\/8\/posts<\/samp><\/td><td class=\"text-end\">Creates a user post<\/td><\/tr><tr><td><samp>POST \/public\/v2\/posts\/8\/comments<\/samp><\/td><td class=\"text-end\">Creates a post comment<\/td><\/tr><tr><td><samp>POST \/public\/v2\/users\/8\/todos<\/samp><\/td><td class=\"text-end\">Creates a user todo<\/td><\/tr><\/table><\/div><\/div><ul><li class=\"text-warning\">Do not post your personal data like name, email, phone, photo etc...<\/li><li class=\"text-info\">For paged results parameter \"page\" should be passed in url ex: GET <code>\/public\/v2\/users?page=1<\/code><\/li><li class=\"text-info\">Request methods PUT, POST, PATCH, DELETE needs access token, which needs to be passed with &quot;Authorization&quot; header as Bearer token.<\/li><li class=\"text-info\">API Versions <code>\/public-api\/*<\/code>, <code>\/public\/v1\/*<\/code> and <code>\/public\/v2\/*<\/code><\/li><li><a href=\"\/consumer\/login\">Get your access token<\/a><\/li><\/ul><h3 class=\"mt-5\">GraphQL Endpoint<\/h3><ul><li>GraphQL API is available at <code>https:\/\/gorest.co.in\/public\/v2\/graphql<\/code><\/li><li><a target=\"_blank\" href=\"\/graphql\/schema.json\">View GraphQL json schema<\/a><\/li><li><a target=\"_blank\" href=\"graphql\/schema.graphql\">View GrapQL schema<\/a><\/li><\/ul><h3 class=\"mt-5\">Features<\/h3><ul><li>Fully secured quick prototyping.<\/li><li>Response format negotiation. (supporting JSON and XML add &quot;.json&quot; or &quot;.xml&quot; to api end point)<\/li><li>Support for the OPTIONS and HEAD verbs.<\/li><li>Full search support on all fields. Ex: https:\/\/gorest.co.in\/public\/v2\/users?name=kumar<\/li><li>Data created\/modified by a user is only visible to that perticular user, all data will be deleted and recreated on daily basis.<\/li><li><a href=\"\/my-account\/logs\">Request and response logging.<\/a><\/li><\/ul><div class=\"row\"><div class=\"col-md-6\"><h3 class=\"mt-3\">Rate Limiting Headers<\/h3><ul><li><a href=\"\/my-account\/access-tokens\">Customize the rate limit per access token.<\/a><\/li><li><code>X-RateLimit-Limit<\/code> number of allowed requests\/minute.<\/li><li><code>X-RateLimit-Remaining<\/code> remaining requests within the current period.<\/li><li><code>X-RateLimit-Reset<\/code> seconds to wait before having maximum number of allowed requests again.<\/li><\/ul><\/div><div class=\"col-md-6\"><h3 class=\"mt-3\">Pagination Headers<\/h3><ul><li><code>X-Pagination-Total<\/code> total number of results.<\/li><li><code>X-Pagination-Pages<\/code> total number of pages.<\/li><li><code>X-Pagination-Page<\/code> current page number.<\/li><li><code>X-Pagination-Limit<\/code> results per page.<\/li><\/ul><\/div><\/div><h3 class=\"mt-3\">API Version 2<\/h3><ul><li>Path: <code>\/public\/v2\/*<\/code><\/li><li>Response format Object or Array of Objects <code>{}<\/code> or <code>[{}]<\/code><\/li><li>HTTP Status code contains the actual response code, response headers contains the pagination information, response body contains the results.<\/li><\/ul><h3 class=\"mt-3\">API Version 1<\/h3><ul><li>Path: <code>\/public\/v1\/*<\/code><\/li><li>Response format <code>{ meta:, data: }<\/code><\/li><li>HTTP status code contains the actual response code, <code>meta<\/code> contains the pagination information and <code>data<\/code> contains the actual results<\/li><\/ul><h3 class=\"mt-3\">API Version 0<\/h3><ul><li>Path: <code>\/public-api\/*<\/code><\/li><li>Response format <code>{ code :, meta:, data: }<\/code><\/li><li>HTTP status code is always 200, <code>code<\/code> contains the actual response code, <code>meta<\/code> contains the pagination information, <code>data<\/code> contains the actual results<\/li><\/ul><h3 class=\"mt-5\">Authentication<\/h3><p>Unlike Web applications, RESTful APIs are usually stateless, which means sessions or cookies should not be used. Therefore, each request should come with some sort of authentication credentials. A common practice is to send a secret access token with each request to authenticate the user. Since an access token can be used to uniquely identify and authenticate a user, API requests should always be sent via HTTPS to prevent man-in-the-middle (MitM) attacks. <\/p><p>There are different ways to send an access token:<\/p><ul><li><a href=\"http:\/\/en.wikipedia.org\/wiki\/Basic_access_authentication\" rel=\"noreferrer\" target=\"_blank\">HTTP Basic Auth<\/a>: the access token is sent as the username.<\/li><li>Query parameter: the access token is sent as a query parameter in the API URL. <br \/>e.g. <samp>https:\/\/gorest.co.in\/public\/v2\/users?access-token=xxx<\/samp><\/li><li><a href=\"http:\/\/oauth.net\/2\/\" rel=\"noreferrer\" target=\"_blank\">OAuth 2<\/a>: the access token is obtained by the consumer from an authorization server and sent to the API server via <a href=\"http:\/\/tools.ietf.org\/html\/rfc6750\" rel=\"noreferrer\" target=\"_blank\">HTTP Bearer Tokens <\/a>, according to the OAuth2 protocol.<\/li><li class=\"text-info\">This API supports only &quot;HTTP Bearer Tokens&quot; and &quot;Query parameter Auth&quot;<\/li><\/ul><h3 class=\"mt-5 mb-3\">cUrl Examples for REST API<\/h3><div class=\"mb-3\"><h6 class=\"text-info\">List users<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XGET \"https:\/\/gorest.co.in\/public\/v2\/users\"<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Create user<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/users\"  -d '{\"name\":\"Tenali Ramakrishna\", \"gender\":\"male\", \"email\":\"tenali.ramakrishna@15ce.com\", \"status\":\"active\"}' <\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Update user<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\"  -XPATCH \"https:\/\/gorest.co.in\/public\/v2\/users\/8\" -d '{\"name\":\"Allasani Peddana\", \"email\":\"allasani.peddana@15ce.com\", \"status\":\"active\"}' <\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Delete user<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XDELETE \"https:\/\/gorest.co.in\/public\/v2\/users\/8\"<\/samp><\/div><h3 class=\"mt-5 mb-3\">cUrl Examples for GraphQL<\/h3><div class=\"mb-3\"><h6 class=\"text-info\">List users<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"query{users {pageInfo {endCursor startCursor hasNextPage hasPreviousPage} totalCount nodes {id name email gender status}}}\"}'<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Get User<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"query{user(id: 8) { id name email gender status }}\"}'<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Create User<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"mutation{createUser(input: {name: \\\"Tenali Ramakrishna\\\" gender: \\\"male\\\" email: \\\"tenali.ramakrishna@15ce.com\\\" status: \\\"active\\\"}) {user{id name gender email status}}}\"}'<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Update User<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"mutation{updateUser(input: {id: 8 name: \\\"Allasani Peddana\\\" email: \\\"allasani.peddana@15ce.com\\\" status: \\\"active\\\"}) {user{id name gender email status}}}\"}'<\/samp><\/div><div class=\"mb-3\"><h6 class=\"text-info\">Delete User<\/h6><samp class=\"user-select-all text-break\">curl -i -H \"Accept:application\/json\" -H \"Content-Type:application\/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XPOST \"https:\/\/gorest.co.in\/public\/v2\/graphql\" -d '{\"query\":\"mutation{deleteUser(input: {id: 8}){user {id name email gender status}}}\"}'<\/samp><\/div><h3 class=\"mt-5\">REST API Http Response Codes<\/h3><ul><li>200: OK. Everything worked as expected.<\/li><li>201: A resource was successfully created in response to a POST request. The Location header contains the URL pointing to the newly created resource.<\/li><li>204: The request was handled successfully and the response contains no body content (like a DELETE request).<\/li><li>304: The resource was not modified. You can use the cached version.<\/li><li>400: Bad request. This could be caused by various actions by the user, such as providing invalid JSON data in the request body etc.<\/li><li>401: Authentication failed.<\/li><li>403: The authenticated user is not allowed to access the specified API endpoint.<\/li><li>404: The requested resource does not exist.<\/li><li>405: Method not allowed. Please check the Allow header for the allowed HTTP methods.<\/li><li>415: Unsupported media type. The requested content type or version number is invalid.<\/li><li>422: Data validation failed (in response to a POST request, for example). Please check the response body for detailed error messages.<\/li><li>429: Too many requests. The request was rejected due to rate limiting.<\/li><li>500: Internal server error. This could be caused by internal program errors.<\/li><\/ul><\/div><hr class=\"mt-5\" \/><div class=\"container\"><div class=\"footer\"><ul class=\"list-inline\"><li class=\"list-inline-item\">&copy; Go Rest 2022<\/li><li class=\"list-inline-item float-lg-end\"><a href=\"\/privacy-policy\">Privacy Policy<\/a><\/li><li class=\"list-inline-item float-lg-end me-3\"><a href=\"\/contact-us\">Contact Us<\/a><\/li><\/ul><\/div><\/div><\/body><\/html> \n"}],"executorName":"main","line":7,"name":"Verify User is able to create user","description":"","durationMillis":1473.1163,"startTime":1654523878052,"failed":false,"refId":"[1:7]","endTime":1654523879538,"exampleIndex":-1},{"sectionIndex":1,"stepResults":[{"result":{"nanos":663200,"millis":0.6632,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"header Authorization = 'Bearer ' + 'ce5ec6bca9454e3d03f36910cb6f4a5f90b418e3740db722378c6c065328b840'"}},{"result":{"nanos":615600,"millis":0.6156,"status":"passed"},"step":{"background":true,"line":5,"prefix":"Given","index":1,"text":"url 'https:\/\/gorest.co.in'"}},{"result":{"nanos":725700,"millis":0.7257,"status":"passed"},"step":{"line":21,"prefix":"Given","index":0,"text":"path  '\/public\/v2\/posts'"}},{"result":{"nanos":493600,"millis":0.4936,"status":"passed"},"step":{"line":22,"prefix":"When","index":1,"text":"request { \"user\": \"Ishatestuser\", \"user_id\": \"4155\", \"title\": \"Test Assessment \" , \"body\": \"Assingment for Yolo Group\" }"}},{"result":{"nanos":184193500,"millis":184.1935,"status":"passed"},"step":{"line":23,"prefix":"When","index":2,"text":"method POST"},"stepLog":"19:27:59.553 request:\n1 > POST https:\/\/gorest.co.in\/public\/v2\/posts\n1 > Authorization: Bearer ce5ec6bca9454e3d03f36910cb6f4a5f90b418e3740db722378c6c065328b840\n1 > Content-Type: application\/json; charset=UTF-8\n1 > Content-Length: 102\n1 > Host: gorest.co.in\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/17.0.2)\n1 > Accept-Encoding: gzip,deflate\n{\"user_id\":\"4155\",\"title\":\"Test Assessment \",\"body\":\"Assingment for Yolo Group\",\"user\":\"Ishatestuser\"}\n\n19:27:59.734 response time in milliseconds: 179\n1 < 201\n1 < Server: nginx\n1 < Date: Mon, 06 Jun 2022 13:57:59 GMT\n1 < Content-Type: application\/json; charset=utf-8\n1 < Transfer-Encoding: chunked\n1 < Connection: keep-alive\n1 < X-Frame-Options: SAMEORIGIN\n1 < X-XSS-Protection: 0\n1 < X-Content-Type-Options: nosniff\n1 < X-Download-Options: noopen\n1 < X-Permitted-Cross-Domain-Policies: none\n1 < Referrer-Policy: strict-origin-when-cross-origin\n1 < X-RateLimit-Limit: 90\n1 < X-RateLimit-Remaining: 89\n1 < X-RateLimit-Reset: 2\n1 < Location: https:\/\/gorest.co.in\/public\/v2\/posts\/2257\n1 < ETag: W\/\"3b8bc9d2d0baf856e899abdf2778b275\"\n1 < Cache-Control: max-age=0, private, must-revalidate\n1 < X-Request-Id: fc2fe363-ba20-4201-a8b1-5a8c903bf963\n1 < X-Runtime: 0.018450\n1 < Strict-Transport-Security: max-age=63072000; includeSubDomains\n1 < Vary: Origin\n{\"user_id\":4155,\"id\":2257,\"title\":\"Test Assessment \",\"body\":\"Assingment for Yolo Group\"}\n"},{"result":{"nanos":16300,"millis":0.0163,"status":"passed"},"step":{"line":24,"prefix":"Then","index":3,"text":"status 201"}},{"result":{"nanos":955100,"millis":0.9551,"status":"passed"},"step":{"line":25,"prefix":"And","index":4,"text":"print response"},"stepLog":"19:27:59.737 [print] {\n  \"user_id\": 4155,\n  \"id\": 2257,\n  \"title\": \"Test Assessment \",\n  \"body\": \"Assingment for Yolo Group\"\n}\n \n"}],"executorName":"main","line":20,"name":"Verify User is able to create post","description":"","durationMillis":187.663,"startTime":1654523879547,"failed":false,"refId":"[2:20]","endTime":1654523879737,"exampleIndex":-1},{"sectionIndex":2,"stepResults":[{"result":{"nanos":341400,"millis":0.3414,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"header Authorization = 'Bearer ' + 'ce5ec6bca9454e3d03f36910cb6f4a5f90b418e3740db722378c6c065328b840'"}},{"result":{"nanos":289200,"millis":0.2892,"status":"passed"},"step":{"background":true,"line":5,"prefix":"Given","index":1,"text":"url 'https:\/\/gorest.co.in'"}},{"result":{"nanos":1510800,"millis":1.5108,"status":"passed"},"step":{"comments":["#Given header Authorization = 'Bearer ' + 'ce5ec6bca9454e3d03f36910cb6f4a5f90b418e3740db722378c6c065328b840'"],"line":29,"prefix":"Given","index":0,"text":"path  '\/public\/v2\/comments'"}},{"result":{"nanos":497200,"millis":0.4972,"status":"passed"},"step":{"line":30,"prefix":"When","index":1,"text":"request { \"post_id\": 2256, \"body\": \"Updating comments\", \"email\": \"lavanya_ret_mehrotra@trantow.org\" , \"name\": \"Ranjith\" , \"status\": \"completed\" }"}},{"result":{"nanos":166882200,"millis":166.8822,"status":"passed"},"step":{"line":31,"prefix":"When","index":2,"text":"method POST"},"stepLog":"19:27:59.759 request:\n1 > POST https:\/\/gorest.co.in\/public\/v2\/comments\n1 > Authorization: Bearer ce5ec6bca9454e3d03f36910cb6f4a5f90b418e3740db722378c6c065328b840\n1 > Content-Type: application\/json; charset=UTF-8\n1 > Content-Length: 124\n1 > Host: gorest.co.in\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/17.0.2)\n1 > Accept-Encoding: gzip,deflate\n{\"post_id\":2256,\"name\":\"Ranjith\",\"body\":\"Updating comments\",\"email\":\"lavanya_ret_mehrotra@trantow.org\",\"status\":\"completed\"}\n\n19:27:59.922 response time in milliseconds: 161\n1 < 201\n1 < Server: nginx\n1 < Date: Mon, 06 Jun 2022 13:57:59 GMT\n1 < Content-Type: application\/json; charset=utf-8\n1 < Transfer-Encoding: chunked\n1 < Connection: keep-alive\n1 < X-Frame-Options: SAMEORIGIN\n1 < X-XSS-Protection: 0\n1 < X-Content-Type-Options: nosniff\n1 < X-Download-Options: noopen\n1 < X-Permitted-Cross-Domain-Policies: none\n1 < Referrer-Policy: strict-origin-when-cross-origin\n1 < X-RateLimit-Limit: 90\n1 < X-RateLimit-Remaining: 88\n1 < X-RateLimit-Reset: 2\n1 < Location: https:\/\/gorest.co.in\/public\/v2\/comments\/2224\n1 < ETag: W\/\"0a9f686bf8358e2fa5fee75bdfb9ebcb\"\n1 < Cache-Control: max-age=0, private, must-revalidate\n1 < X-Request-Id: 4e73009b-f68d-4629-95a9-ca0fe85da30b\n1 < X-Runtime: 0.018649\n1 < Strict-Transport-Security: max-age=63072000; includeSubDomains\n1 < Vary: Origin\n{\"post_id\":2256,\"name\":\"Ranjith\",\"id\":2224,\"body\":\"Updating comments\",\"email\":\"lavanya_ret_mehrotra@trantow.org\"}\n"},{"result":{"nanos":27200,"millis":0.0272,"status":"passed"},"step":{"line":32,"prefix":"Then","index":3,"text":"status 201"}},{"result":{"nanos":2009900,"millis":2.0099,"status":"passed"},"step":{"line":33,"prefix":"And","index":4,"text":"print response"},"stepLog":"19:27:59.926 [print] {\n  \"post_id\": 2256,\n  \"name\": \"Ranjith\",\n  \"id\": 2224,\n  \"body\": \"Updating comments\",\n  \"email\": \"lavanya_ret_mehrotra@trantow.org\"\n}\n \n"}],"executorName":"main","line":27,"name":"Verify User is able to create Comments","description":"","durationMillis":171.5579,"startTime":1654523879752,"failed":false,"refId":"[3:27]","endTime":1654523879926,"exampleIndex":-1}],"callDepth":0,"name":"API test for YoloGroup","description":"","resultDate":"2022-06-06 07:27:59 PM","durationMillis":1832.3372,"passedCount":3}